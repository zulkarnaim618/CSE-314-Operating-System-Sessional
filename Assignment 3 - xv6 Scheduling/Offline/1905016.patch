diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..a36ac52
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "stat.h": "c",
+        "defs.h": "c",
+        "memlayout.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..c501a93 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
+
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..a98bcba 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             processBelongsToCpu(struct proc* p);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..73a5f61 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,8 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
+#define DEFAULT_TICKET_COUNT 10
+#define QUEUE_LEVEL_COUNT 2
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..36dd622 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,12 +5,14 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "rand.h"
 
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
 struct proc *initproc;
+uint time;
 
 int nextpid = 1;
 struct spinlock pid_lock;
@@ -124,6 +126,9 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->queueNum = 1;
+  p->originalTicketCount = p->currentTicketCount = DEFAULT_TICKET_COUNT;
+  p->consumedTimeTotal = p->consumedTimeCurrent = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -320,6 +325,9 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  acquire(&p->lock);
+  np->originalTicketCount = np->currentTicketCount = p->originalTicketCount;
+  release(&p->lock);
   release(&np->lock);
 
   return pid;
@@ -434,6 +442,22 @@ wait(uint64 addr)
   }
 }
 
+int
+processBelongsToCpu(struct proc* p) {
+  int flag = 0;
+  struct cpu *c;
+  for(c = cpus;c < &cpus[NCPU]; c++) {
+    if (p==c->proc) {
+      flag = 1;
+      break;
+    }
+  }
+  return flag;
+}
+
+struct spinlock schedulerlock;
+struct proc *prev = proc;
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -445,28 +469,130 @@ void
 scheduler(void)
 {
   struct proc *p;
+
   struct cpu *c = mycpu();
-  
+  if(cpuid() == 0){
+    acquire(&tickslock);
+    time = ticks;
+    release(&tickslock);
+  }
+
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+    // scheduling
+    for (int i=1;i<=QUEUE_LEVEL_COUNT;i++) {
+      if (i==1) {
+        // lottery scheduling
+        acquire(&schedulerlock);
+        int total = 0;
+        for(p = proc; p < &proc[NPROC]; p++) {
+          if (processBelongsToCpu(p)) continue;
+          acquire(&p->lock);
+          if (p->state==RUNNABLE && p->queueNum==i) {
+            total+=p->currentTicketCount;
+          }
+          release(&p->lock);
+        }
+        if (total==0) {
+          // assign ticket
+          for(p = proc; p < &proc[NPROC]; p++) {
+            if (processBelongsToCpu(p)) continue;
+            acquire(&p->lock);
+            if (p->state == RUNNABLE && p->queueNum==i) {
+              p->currentTicketCount = p->originalTicketCount;
+            }
+            release(&p->lock);
+          }
+          release(&schedulerlock);
+          continue;
+        }
+        int random = (genrand()%total)+1;
+        total = 0;
+        int flag = 0;
+        for(p = proc; p < &proc[NPROC]; p++) {
+          if (processBelongsToCpu(p)) continue;
+          acquire(&p->lock);
+          if (p->state==RUNNABLE && p->queueNum==i) {
+            if (total+p->currentTicketCount>=random) {
+              c->proc = p;
+              p->consumedTimeCurrent = 0;
+              p->currentTicketCount--;
+              release(&schedulerlock);
+              while (p->consumedTimeCurrent<TIME_LIMIT_1 && p->state==RUNNABLE) {
+                p->state = RUNNING;
+                swtch(&c->context, &p->context);
+              }
+              if (p->consumedTimeCurrent<TIME_LIMIT_1) {
+                if (p->queueNum>1) p->queueNum--;
+              }
+              else {
+                if (p->queueNum<QUEUE_LEVEL_COUNT) p->queueNum++;
+              }
+              acquire(&schedulerlock);
+              c->proc = 0;
+              release(&schedulerlock);
+              release(&p->lock);
+              flag = 1;
+              break;
+            }
+            total+=p->currentTicketCount;
+          }
+          release(&p->lock);
+        }
+        if (flag==1) break;
+        else {
+          release(&schedulerlock);
+        }
+      }
+      else {
+        // round robin
+        acquire(&schedulerlock);
+        int flag = 0;
+        int count =0;
+        while (count<NPROC) {
+          for(p = prev; p < &proc[NPROC] && count<NPROC; p++,count++) {
+            prev = p;
+            if (processBelongsToCpu(p)) continue;
+            acquire(&p->lock);
+            if (p->state==RUNNABLE && p->queueNum==i) {
+                c->proc = p;
+                p->consumedTimeCurrent = 0;
+                if (++prev >= &proc[NPROC]) {
+                  prev = proc;
+                }
+                release(&schedulerlock);
+                while (p->consumedTimeCurrent<TIME_LIMIT_2 && p->state==RUNNABLE) {
+                  p->state = RUNNING;
+                  swtch(&c->context, &p->context);
+                }
+                if (p->consumedTimeCurrent<TIME_LIMIT_2) {
+                  if (p->queueNum>1) p->queueNum--;
+                }
+                else {
+                  if (p->queueNum<QUEUE_LEVEL_COUNT) p->queueNum++;
+                }
+                acquire(&schedulerlock);
+                c->proc = 0;
+                release(&schedulerlock);
+                release(&p->lock);
+                flag = 1;
+                break;
+            }
+            release(&p->lock);
+          }
+          if (flag==1) break;
+          if (++prev >= &proc[NPROC]) {
+            prev = proc;
+          }
+        }
+        if (flag==1) break;
+        else {
+          release(&schedulerlock);
+        }
       }
-      release(&p->lock);
     }
   }
 }
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ad1b4a9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,11 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int queueNum;
+  int originalTicketCount;
+  int currentTicketCount;
+  int consumedTimeTotal;
+  int consumedTimeCurrent;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..713ce28
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/rand.h b/kernel/rand.h
new file mode 100644
index 0000000..24bb7ee
--- /dev/null
+++ b/kernel/rand.h
@@ -0,0 +1,121 @@
+/* A C-program for MT19937: Real number version                */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* Any feedback is very welcome. For any question, comments,       */
+/* see http://www.math.keio.ac.jp/matumoto/emt.html or email       */
+/* matumoto@math.keio.ac.jp                                        */
+
+/* Period parameters */
+
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..cbfdb87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..da165ba 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..399b909 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -4,6 +4,7 @@
 #include "param.h"
 #include "memlayout.h"
 #include "spinlock.h"
+#include "pstat.h"
 #include "proc.h"
 
 uint64
@@ -89,3 +90,55 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int n;
+  argint(0, &n);
+  struct proc *p = myproc();
+  if (n>0) {
+    acquire(&p->lock);
+    p->originalTicketCount = p->currentTicketCount = n;
+    release(&p->lock);
+    return 0;
+  }
+  //
+  acquire(&p->lock);
+  p->originalTicketCount = p->currentTicketCount = DEFAULT_TICKET_COUNT;
+  release(&p->lock);
+  return -1;
+}
+
+struct pstat pst;
+extern struct proc proc[NPROC];
+struct spinlock pstatlock;
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 add;
+  argaddr(0,&add);
+  acquire(&pstatlock);
+  for(int i =0;i<NPROC;i++) {
+    acquire(&proc[i].lock);
+    
+    pst.pid[i] = proc[i].pid;
+    if (proc[i].state==UNUSED) {
+      pst.inuse[i] = 0;
+    }
+    else {
+      pst.inuse[i] = 1;
+    }
+    pst.inQ[i] = proc[i].queueNum;
+    pst.tickets_current[i] = proc[i].currentTicketCount;
+    pst.tickets_original[i] = proc[i].originalTicketCount;
+    pst.time_slices[i] = proc[i].consumedTimeTotal;
+    
+    release(&proc[i].lock);
+  }
+  struct proc *p = myproc();
+  int r = copyout(p->pagetable,add,(char*)&pst,sizeof(pst));
+  release(&pstatlock);
+  return r;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..52e7d84 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -79,7 +79,7 @@ usertrap(void)
   // give up the CPU if this is a timer interrupt.
   if(which_dev == 2)
     yield();
-
+  
   usertrapret();
 }
 
@@ -160,12 +160,27 @@ kerneltrap()
   w_sstatus(sstatus);
 }
 
+extern uint time;
+extern struct proc proc[NPROC];
+
 void
 clockintr()
 {
   acquire(&tickslock);
   ticks++;
   wakeup(&ticks);
+  // priority boosting
+  struct proc *p;
+  if (ticks-time>=BOOST_INTERVAL) {
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if (p->state!=UNUSED) {
+        p->queueNum = 1;
+      }
+      release(&p->lock);
+    }
+    time = ticks;
+  }
   release(&tickslock);
 }
 
@@ -208,7 +223,14 @@ devintr()
     if(cpuid() == 0){
       clockintr();
     }
-    
+    struct proc *p = myproc();
+    if (p!=0) {
+      acquire(&p->lock);
+      p->consumedTimeCurrent++;
+      p->consumedTimeTotal++;
+      release(&p->lock);
+    }
+
     // acknowledge the software interrupt by clearing
     // the SSIP bit in sip.
     w_sip(r_sip() & ~2);
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..5ad1c1a
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+int main (int argc, char* argv[])
+{
+    if (argc <2) {
+        fprintf(2, "Usage: %s ticket_count\n", argv[0]);
+        exit(1);
+    }
+    if (settickets(atoi(argv[1])) < 0) {
+        fprintf(2, "%s: set ticket failed\n", argv[0]);
+        exit(1);
+    }
+    fork();
+    while(1);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..8d94785
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+
+int main ()
+{
+    struct pstat *stat = (struct pstat*) malloc(sizeof(struct pstat));
+    getpinfo(stat);
+    printf("PID\t|\tIn Use\t|\tinQ\t|\tOriginal Tickets\t|\tCurrent Tickets\t|\tTime Slices\n");
+    for (int i=0;i<NPROC;i++) {
+        if (stat->pid[i]>0) {
+            printf("%d\t\t%d\t\t%d\t\t\t%d\t\t\t\t%d\t\t\t%d\n",stat->pid[i],stat->inuse[i],stat->inQ[i],stat->tickets_original[i],stat->tickets_current[i],stat->time_slices[i]);
+        }
+    }
+    free(stat);
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..64b8048 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..21930eb 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
\ No newline at end of file
