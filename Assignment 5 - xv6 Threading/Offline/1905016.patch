diff --git a/Makefile b/Makefile
index 39a99d7..a822569 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..dd68ef7 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(uint64, uint64, uint64);
+int             thread_join(int);
+void            thread_freepagetable(pagetable_t, uint64);
+void            sleep_cond(uint64, uint64);
+void            wakeup_cond(uint64, int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +178,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
+void            uvmthreadfree(pagetable_t, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..cffbbc5 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -13,7 +13,9 @@ struct proc proc[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+int thread_id = 1;
 struct spinlock pid_lock;
+struct spinlock thread_id_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -48,11 +50,12 @@ void
 procinit(void)
 {
   struct proc *p;
-  
+  initlock(&thread_id_lock, "thread_id");
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->memlock, "mem");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -102,6 +105,19 @@ allocpid()
   return pid;
 }
 
+int
+allocthread_id()
+{
+  int tid;
+  
+  acquire(&thread_id_lock);
+  tid = thread_id;
+  thread_id = thread_id + 1;
+  release(&thread_id_lock);
+
+  return tid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -124,6 +140,9 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->is_thread = 0;
+  p->mem_id = p->pid;
+  p->thread_id = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -158,8 +177,12 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable) {
+    if (p->is_thread) 
+      thread_freepagetable(p->pagetable, p->sz);
+    else 
+      proc_freepagetable(p->pagetable, p->sz);
+  }
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +192,9 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->is_thread = 0;
+  p->mem_id = 0;
+  p->thread_id = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -215,6 +241,14 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+void
+thread_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmthreadfree(pagetable, sz);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -267,10 +301,26 @@ growproc(int n)
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
     }
+    struct proc* pr;
+    for(pr = proc; pr < &proc[NPROC]; pr++) {
+      if (pr!=p && pr->mem_id==p->mem_id) {
+        uvmmirror(p->pagetable, pr->pagetable, p->sz, sz);
+        pr->sz = sz;
+      }
+    }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    int npages = (PGROUNDUP(p->sz) - PGROUNDUP(sz)) / PGSIZE;
+    struct proc* pr;
+    for(pr = proc; pr < &proc[NPROC]; pr++) {
+      if (pr!=p && pr->mem_id==p->mem_id) {
+        uvmunmap(pr->pagetable, PGROUNDUP(sz), npages, 0);
+        pr->sz = sz;
+      }
+    }
   }
   p->sz = sz;
+  
   return 0;
 }
 
@@ -325,6 +375,63 @@ fork(void)
   return pid;
 }
 
+int
+thread_create(uint64 func, uint64 arg, uint64 stack)
+{
+  int i;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  np->trapframe->epc = func;
+  np->trapframe->sp = stack + PGSIZE;
+  np->trapframe->sp -= np->trapframe->sp % 16; // riscv sp must be 16-byte aligned    //*
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = arg;
+  np->trapframe->ra = 0xffffffff;     //*
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  acquire(&p->lock);
+  np->mem_id = p->mem_id;
+  release(&p->lock);
+  np->is_thread = 1;
+  int t_id = np->thread_id = allocthread_id();
+  release(&np->lock);
+
+  return t_id;
+}
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -434,6 +541,48 @@ wait(uint64 addr)
   }
 }
 
+int
+thread_join(int id)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p && pp->mem_id==p->mem_id && pp->thread_id==id) {
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -561,6 +710,44 @@ sleep(void *chan, struct spinlock *lk)
   acquire(lk);
 }
 
+void
+sleep_cond(uint64 cond, uint64 var)
+{
+  struct proc *p = myproc();
+  
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+
+  uint64 va0, pa0;
+  va0 = PGROUNDDOWN(var);
+  pa0 = walkaddr(p->pagetable, va0);
+  __sync_synchronize();
+  __sync_lock_release((uint8*)(pa0 + (var - va0)));
+
+  //va0 = PGROUNDDOWN(cond);
+  //pa0 = walkaddr(p->pagetable, va0);
+  //(pa0 + (cond - va0))
+
+  // Go to sleep.
+  p->chan = (void*)cond;
+  p->state = SLEEPING;
+
+  sched();
+
+  // Tidy up.
+  p->chan = 0;
+
+  // Reacquire original lock.
+  release(&p->lock);
+
+}
+
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
 void
@@ -579,6 +766,29 @@ wakeup(void *chan)
   }
 }
 
+void
+wakeup_cond(uint64 cond, int all)
+{
+  struct proc *p;
+  //uint64 va0, pa0;
+  //va0 = PGROUNDDOWN(cond);
+  //pa0 = walkaddr(myproc()->pagetable, va0);
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->mem_id==myproc()->mem_id && p->chan == (void*)cond) {
+        p->state = RUNNABLE;
+        if (all==0) {
+          release(&p->lock);
+          break;
+        }
+      }
+      release(&p->lock);
+    }
+  }
+}
+
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..7665d71 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  struct spinlock memlock;
+  int is_thread;
+  int mem_id;
+  int thread_id;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..7774818 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_sleep_cond(void);
+extern uint64 sys_wakeup_cond(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
+[SYS_sleep_cond]   sys_sleep_cond,
+[SYS_wakeup_cond]   sys_wakeup_cond,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..dbb9ddb 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_sleep_cond  25
+#define SYS_wakeup_cond 26
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..349952f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -35,16 +35,28 @@ sys_wait(void)
   return wait(p);
 }
 
+extern struct proc proc[NPROC];
+
 uint64
 sys_sbrk(void)
 {
   uint64 addr;
   int n;
-
+  struct proc *p = myproc();
+  struct proc* pr;
+  for(pr = proc; pr < &proc[NPROC]; pr++) {
+    if (pr->mem_id==p->mem_id && pr->is_thread==0) {
+      break;
+    }
+  }
   argint(0, &n);
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  acquire(&pr->memlock);
+  if(growproc(n) < 0) {
+    release(&pr->memlock);
     return -1;
+  }
+  release(&pr->memlock);
   return addr;
 }
 
@@ -89,3 +101,49 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 func,arg,stack;
+  argaddr(0, &func);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return thread_create(func,arg,stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int id;
+  argint(0,&id);
+  return thread_join(id);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0; //not reached
+}
+
+uint64
+sys_sleep_cond(void)
+{
+  uint64 cond,var;
+  argaddr(0, &cond);
+  argaddr(1, &var);
+  sleep_cond(cond,var);
+  return 0;
+}
+
+uint64
+sys_wakeup_cond(void)
+{
+  uint64 cond;
+  int all;
+  argaddr(0, &cond);
+  argint(1, &all);
+  wakeup_cond(cond, all);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..00ae05b 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,6 +296,14 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+void
+uvmthreadfree(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -332,6 +340,36 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 startsz, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  for(i = PGROUNDUP(startsz); i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    //if((mem = kalloc()) == 0)
+    //  goto err;
+    //memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      //kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, PGROUNDUP(startsz), (i-PGROUNDUP(startsz)) / PGSIZE, 0);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..4e6c3f5
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,157 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/synchronization.h"
+
+struct queue {
+    int arr[16];
+	int front;
+	int rear;
+	int size;
+};
+
+void init_queue(struct queue *q){
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+
+void push(struct queue* q, int x){
+    q->arr[q->rear] = x;
+    q->rear = (q->rear+1)%16;
+    q->size++;
+}
+
+int front(struct queue *q){
+    if(q->size == 0){
+        return -1;
+    }
+    return q->arr[q->front];
+}
+
+void pop(struct queue *q){
+    if(q->size>0){
+        q->front = (q->front+1)%16;
+        q->size--;
+    }
+}
+
+struct queue q;
+// a mutex object lock 
+// a semaphore object empty
+// a semaphore object full
+
+struct thread_mutex printLock;
+struct thread_mutex mutex;
+struct sem_t empty;
+struct sem_t full;
+
+
+
+void init_semaphore()
+{
+	// initialize mutex lock
+	// initialize semaphore empty with 5
+	// initialize semaphore full with 0
+
+    thread_mutex_init(&printLock);
+    thread_mutex_init(&mutex);
+    sem_init(&empty,5);
+    sem_init(&full,0);
+
+}
+
+void ProducerFunc(void * arg)
+{	
+
+    thread_mutex_lock(&printLock);
+	printf("%s\n",(char*)arg);
+    thread_mutex_unlock(&printLock);
+
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+		// wait for mutex lock
+
+        sem_wait(&empty);
+
+        sleep(1);
+
+        thread_mutex_lock(&mutex);
+
+		push(&q , i);
+
+        thread_mutex_lock(&printLock);
+		printf("producer produced item %d\n",i);
+        thread_mutex_unlock(&printLock);
+
+		// unlock mutex lock	
+		// post semaphore full
+
+        thread_mutex_unlock(&mutex);
+        sem_post(&full);
+        
+	}
+    thread_exit();
+}
+
+void ConsumerFunc(void * arg)
+{
+
+	thread_mutex_lock(&printLock);
+	printf("%s\n",(char*)arg);
+    thread_mutex_unlock(&printLock);
+
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+		// wait for mutex lock
+ 		
+	    sem_wait(&full);
+
+        sleep(1);
+        
+        thread_mutex_lock(&mutex);
+
+		int item = front(&q);
+		pop(&q);
+
+        thread_mutex_lock(&printLock);
+		printf("consumer consumed item %d\n",item);	
+        thread_mutex_unlock(&printLock);
+
+		// unlock mutex lock
+		// post semaphore empty	
+
+        thread_mutex_unlock(&mutex);
+        sem_post(&empty);	
+	}
+    thread_exit();
+}
+
+int main(void)
+{	
+	
+    init_queue(&q);
+	init_semaphore();
+	
+	char* message1 = "i am producer";
+	char* message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	thread_join(thread1);
+  	thread_join(thread2);	
+	
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/synchronization.h b/user/synchronization.h
new file mode 100644
index 0000000..b633d52
--- /dev/null
+++ b/user/synchronization.h
@@ -0,0 +1,93 @@
+
+struct thread_spinlock {
+  uint locked;
+};
+
+void thread_spin_init(struct thread_spinlock *lk) {
+    lk->locked = 0;
+}
+
+void thread_spin_lock(struct thread_spinlock *lk) {
+    while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+    __sync_synchronize();
+}
+
+void thread_spin_unlock(struct thread_spinlock *lk) {
+
+    __sync_synchronize();
+    __sync_lock_release(&lk->locked);
+}
+
+struct thread_mutex {
+  uint locked;
+};
+
+void thread_mutex_init(struct thread_mutex *m) {
+    m->locked = 0;
+}
+
+void thread_mutex_lock(struct thread_mutex *m)
+{
+    while(__sync_lock_test_and_set(&m->locked, 1) != 0) {
+        sleep(1);
+    }
+    __sync_synchronize();
+}
+
+void thread_mutex_unlock(struct thread_mutex *m)
+{
+    __sync_synchronize();
+    __sync_lock_release(&m->locked);
+}
+
+struct thread_cond {
+    int val;
+};
+
+void thread_cond_wait(struct thread_cond *cond, struct thread_mutex *m)
+{
+    sleep_cond(cond,&m->locked);
+    thread_mutex_lock(m);
+}
+
+void thread_cond_signal(struct thread_cond *cond)
+{
+    wakeup_cond(cond,0);
+}
+
+void thread_cond_signalAll(struct thread_cond *cond)
+{
+    wakeup_cond(cond,1);
+}
+
+struct sem_t {
+    int count;
+    struct thread_cond cond;
+    struct thread_mutex m;
+};
+
+void sem_init(struct sem_t *s, int value) {
+    s->count = value;
+    thread_mutex_init(&s->m);
+    //
+}
+
+void sem_post(struct sem_t *s) {
+    thread_mutex_lock(&s->m);
+    s->count++;
+    if (s->count==1) 
+        thread_cond_signalAll(&s->cond);
+    thread_mutex_unlock(&s->m);
+}
+
+void sem_wait(struct sem_t *s) {
+    thread_mutex_lock(&s->m);
+    while (s->count == 0) {
+        thread_cond_wait(&s->cond, &s->m);
+    }
+    s->count--;
+    thread_mutex_unlock(&s->m);
+}
+
+
+
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..a1d989b
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,74 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/synchronization.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    printf( "Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+          //thread_spin_lock(&lock);
+          thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&lock);
+          thread_mutex_unlock(&mlock);
+
+    }
+  
+    printf( "Done s:%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+    thread_mutex_init(&mlock);
+    thread_spin_init(&lock);
+
+    struct balance b1 = {"b1", 3200};
+    struct balance b2 = {"b2", 2800};
+    
+    void *s1, *s2;
+    int thread1, thread2, r1, r2;
+
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+
+    thread1 = thread_create(do_work, (void*)&b1, s1);
+    thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+    
+    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+        thread1, r1, thread2, r2, total_balance);
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..2338561 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct thread_cond;
 
 // system calls
 int fork(void);
@@ -22,6 +23,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void *stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+int sleep_cond(struct thread_cond*, uint*);
+int wakeup_cond(struct thread_cond*, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..1da44a3 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("sleep_cond");
+entry("wakeup_cond");
\ No newline at end of file
